{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"data-structures/fenwick/","text":"Fenwick Tree (Binary Indexed Tree) A Fenwick Tree is used for efficiently computing prefix sums and updates in O(log n) time. Code ```cpp class FenwickTree { vector tree; int n; FenwickTree(int size) : n(size), tree(size + 1, 0) {} void update(int index, int delta) { for (; index <= n; index += index & -index) tree[index] += delta; } int query(int index) { int sum = 0; for (; index > 0; index -= index & -index) sum += tree[index]; return sum; } };","title":"Fenwick Tree (Binary Indexed Tree)"},{"location":"data-structures/fenwick/#fenwick-tree-binary-indexed-tree","text":"A Fenwick Tree is used for efficiently computing prefix sums and updates in O(log n) time.","title":"Fenwick Tree (Binary Indexed Tree)"},{"location":"data-structures/fenwick/#code","text":"```cpp class FenwickTree { vector tree; int n; FenwickTree(int size) : n(size), tree(size + 1, 0) {} void update(int index, int delta) { for (; index <= n; index += index & -index) tree[index] += delta; } int query(int index) { int sum = 0; for (; index > 0; index -= index & -index) sum += tree[index]; return sum; } };","title":"Code"}]}